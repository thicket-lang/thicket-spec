= Thicket Language Specification

== Introduction

Thicket is a general-purpose statically and strongly typed programming language. It supports object-oriented and
functional programming styles. Its object-oriented system is based on model and trait multiple inheritance.

The Thicket type system is based on nominal subtyping with subtyping polymorphism. A static typing means that every 
expression has a known compile-time type and language guarantees that at runtime it will evaluate to an instance of 
that type. Such strong typing means any conversions between different type are explicit or expressed using adapter 
mechanism which are User-defined implicit conversions instanciable during the compilation stage.

Thicket syntax is intended to be simple and coherent. It supports traditional nested block expression with most of 
control structure express using the language and its lazyness capabiliy. For instance switch, when/then/else, sequence
and for/while structures are in fact libraries expressed in Thicket.

Last but not least *null* does not exist in the language since side effect does not exists in the language. Immutability 
is a strong principle like in any traditional pure functional languages. Then data evolution is a basic principle and
this is done using object and class mutation instruction available in the language.

### License 

https://github.com/d-plaindoux/thicket[Thicket] Copyright (c) 2015-2016 Didier Plaindoux Licensed under the LGPL2 license.

This program is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General 
Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more 
details.

You should have received a copy of the GNU Lesser General Public License along with this program; see the file COPYING. 
If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

== General
Thicket is a functionnal programming language with prototype, trait and class definitions. 

=== First Contact

----
$ thicket toplevel -p Core               <1>
Thicket v0.1
> console.log "Hello, World!" ;;         <2>
Hello, World!                            <3>
 - : consoleClass = <class consoleClass> <4>                            
----
<1> Start Thicket REPL using Core package
<2> Display "Hello, World!" using the builtin console
<3> String displayed in the standard output
<4> Returned value which is the console itself

=== Playing with the language

==== Playing with numbers

----
> 1+1 ;;
- : number = 2
----

==== Playing with strings

----
> "Hello" ;;
- : string = "Hello"
----

----
> "Hello," + " World!" ;;
- : string = "Hello, World!"
----

==== Playing with characters

----
> 'a' ;;
- : char = 'a'
----

----
> 'a' + 2 ;;
- : char = 'c'
----

==== Playing with functions

----
> x -> x ;;
- : ['a] 'a -> 'a = <function>
----

==== Playing with models

----
> model Person { name : string }
  Person ;;
- : string -> Person
----

== The Thicket Syntax

The Thicket language syntax is inspired by functional languages and object oriented languages. From this starting point we propose now a step by step language description and specification.

=== Lexical conventions 

==== Blanks

The following characters are considered as blanks: space, newline, horizontal tabulation, carriage return, line feed and form feed. These characters as no specific signification and are ignored. 

==== Comments

Comments are introduced by two conventions inspired by the Java(TM) and C languages. First one is a line based comment when the second is a block based comment.

----
comment ::= // (char - {\n})* \n? 
            /* char* - {*/} */
----

There is no way to specify structural comment like Java andits corresponding mechanism called javadoc. The current version of the syntax does not provide any support for documentation construction for API definition and navigation. Encapsulated block commment in another one is not allowed. In that case a comment like `/\*1 ... /*2 ... 2*/ ...1*/` starts at token `/*1` and ends at `2*/`. Therefore all characters following this comment are considered as a Thicket source code fragment.

==== Integer literals

An Integer is a sequence of one or more digit. A negative number is specified with the minus sign at the beginning of the literal. Default supported integers are in decimal (radix 10). An alternative syntax is proposed for hexadecimal (radix 16) integer definition; these integers are preceded by the 0x prefix or 0X prefix.

----
number ::= [+-]?[0-9]+(.[0-9]+)?((E|e)[+-]?[0-9]+)?
           [+-]?(0(x|X))([0-9]|[a-f]|[A-F])+
----

*Examples* `123`, `+1`, `-9`, `1.3e23`, `0xFF3E`, `+0XA3`, `-0xFE`, `-0Xab`

==== Character literals

A character literal is a single character delimited by the single quote character. A character literal can be a regular character or an escaped one.

----
character ::= 'char - {’}’
char      ::= (regular|escaped) escaped ::= \(b|r|n|t|f|’|")
----

The syntax prohibits the `’’’` sequence because it’s interpreted as `(’’)’`. Then the character literal does not enclose any character and the last quote has not corresponding ending quote which implies an unbalanced term. For this purpose escaped characters are defined then the right syntax for the previous character literal is ’ ́’. Indeed some characters can also be denoted usign this escape sequence as usual in a programming language.

*Examples*: `’a’`, `’\t’`, `’\’’`
  
==== String literals

A string is a sequence of characters delimited by double quote character.

----
string ::= "(char - {"})*"
----

The syntax prohibits the `"""` sequence because it’s interpreted as `("")"`. The empty string is valid but the last double quote don’t imply a well balanced term and then it’s not a well formed sequence of literals.

*Examples*: `"a simple string"`, `"Another \"one\""`, `"A multi \n line string"`

==== Identifier and Operators

Identifiers are used when specifying any kind of entity or variable in the language.

----
identifier ::= [a-zA-Z_][a-zA-Z0-9_$]*('?)
operator   ::= ([~$#?;:@&!%><=+*/|.^-]|\\|\[|\])([~$#?;:@&!%><=+*/|_.^-]|\\|\[|\])*